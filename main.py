import discord
from discord import app_commands, ui
import os
import mysql.connector
from mysql.connector import Error

# --- CONFIGURA√á√ÉO ---
# MAPA DE CARGOS SIMPLIFICADO AQUI
ROLE_MAP = {
    'Aluno': 'Aluno',
    'Mentorado': 'Mentorado'
}
REGISTRATION_LINK = "https://aluno.operebem.com.br"
EMBED_COLOR = 0x5865F2 

# --- MODAL: O FORMUL√ÅRIO POP-UP PARA O C√ìDIGO ---
class ValidationModal(ui.Modal, title="Valida√ß√£o de Acesso"):
    token_input = ui.TextInput(label="Seu Token de Valida√ß√£o", placeholder="Cole aqui o token que voc√™ pegou no site...", style=discord.TextStyle.short)

    async def on_submit(self, interaction: discord.Interaction):
        # A l√≥gica interna de valida√ß√£o permanece a mesma, agora usando o novo ROLE_MAP
        await interaction.response.defer(ephemeral=True, thinking=True)
        token = self.token_input.value.strip()
        connection = create_db_connection()

        if not connection:
            await interaction.followup.send("‚ùå Ocorreu um erro interno. A conex√£o com o banco de dados falhou.", ephemeral=True)
            return

        cursor = connection.cursor(dictionary=True)
        try:
            cursor.execute("SELECT * FROM discord_validation WHERE validation_code = %s", (token,))
            record = cursor.fetchone()

            if not record:
                await interaction.followup.send("‚ùå Token inv√°lido. Verifique o c√≥digo e tente novamente.", ephemeral=True)
                return

            if record['is_validated']:
                await interaction.followup.send("‚ö†Ô∏è Este token j√° foi utilizado.", ephemeral=True)
                return

            target_tier = record['subscription_tier']
            target_role_name = ROLE_MAP.get(target_tier)

            if not target_role_name:
                await interaction.followup.send(f"‚ùå Erro: Seu plano '{target_tier}' n√£o corresponde a um cargo v√°lido. Contate o suporte.", ephemeral=True)
                return

            guild = interaction.guild
            member = interaction.user
            role_to_add = discord.utils.get(guild.roles, name=target_role_name)

            if not role_to_add:
                await interaction.followup.send(f"‚ùå Erro cr√≠tico: O cargo '{target_role_name}' n√£o foi encontrado. Contate um administrador.", ephemeral=True)
                return

            roles_to_remove = [role for role in member.roles if role.name in ROLE_MAP.values() and role.name != target_role_name]
            if roles_to_remove:
                await member.remove_roles(*roles_to_remove, reason="Upgrade ou ajuste de plano")

            await member.add_roles(role_to_add, reason="Valida√ß√£o de assinatura via site")

            cursor.execute("UPDATE discord_validation SET is_validated = TRUE, discord_user_id = %s WHERE id = %s", (str(member.id), record['id']))
            connection.commit()

            await interaction.followup.send(f"‚úÖ Valida√ß√£o conclu√≠da! Voc√™ recebeu o cargo **{target_role_name}**. Bem-vindo(a)!", ephemeral=True)

        except Error as e:
            print(f"Erro de banco de dados na valida√ß√£o: {e}")
            await interaction.followup.send("‚ùå Ocorreu um erro ao processar sua valida√ß√£o. Tente novamente.", ephemeral=True)
        finally:
            cursor.close()
            connection.close()


# --- VIEW: A CAIXA COM OS BOT√ïES DE VALIDA√á√ÉO ---
class ValidationView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @ui.button(label="‚úÖ Validar", style=discord.ButtonStyle.green, custom_id="persistent_validation_button")
    async def validate_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_modal(ValidationModal())

    @ui.button(label="üì© Ainda n√£o sou aluno", style=discord.ButtonStyle.blurple, custom_id="persistent_register_button")
    async def register_button(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message(
            f"Para se tornar um aluno e obter seu token de acesso, [clique aqui para se cadastrar]({REGISTRATION_LINK}).",
            ephemeral=True
        )

# --- CONEX√ÉO COM O BOT ---
intents = discord.Intents.default()
intents.members = True
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# --- CONEX√ÉO COM O BANCO DE DADOS ---
def create_db_connection():
    try:
        connection = mysql.connector.connect(
            host=os.environ.get('DB_HOST'),
            user=os.environ.get('DB_USER'),
            password=os.environ.get('DB_PASSWORD'),
            database=os.environ.get('DB_NAME')
        )
        if connection.is_connected():
            return connection
    except Error as e:
        print(f"Erro ao conectar ao MySQL: {e}")
        return None

# --- EVENTO DE BOT PRONTO (L√ìGICA DE PERSIST√äNCIA) ---
@client.event
async def on_ready():
    client.add_view(ValidationView())
    await tree.sync()
    print(f'‚úÖ Bot {client.user} est√° online e pronto!')
    print('Comandos sincronizados.')

# --- COMANDO DE SETUP DO PAINEL DE VALIDA√á√ÉO ---
@tree.command(name="enviar_painel_validacao", description="Envia o painel de valida√ß√£o fixo neste canal.")
@app_commands.default_permissions(administrator=True)
async def send_validation_panel(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üîë √Årea Exclusiva para Alunos TradingClass",
        description="Para acessar os canais e benef√≠cios exclusivos, √© necess√°rio validar seu cadastro.\n\nClique no bot√£o abaixo para inserir seu TOKEN √∫nico (dispon√≠vel na √°rea do aluno) e liberar automaticamente seu cargo:",
        color=EMBED_COLOR
    )
    await interaction.channel.send(embed=embed, view=ValidationView())
    await interaction.response.send_message("Painel de valida√ß√£o enviado!", ephemeral=True)

# --- COMANDO DE BOAS-VINDAS ---
@tree.command(name="enviar_boas_vindas", description="Envia a mensagem de boas-vindas neste canal.")
@app_commands.default_permissions(administrator=True)
@app_commands.describe(canal_validacao="O canal para onde o bot√£o de valida√ß√£o deve levar.")
async def send_welcome_message(interaction: discord.Interaction, canal_validacao: discord.TextChannel):
    welcome_text = (
        # BEM-VINDO ALTERADO AQUI
        "üíé **COMUNIDADE TRADINGCLASS**\n\n"
        "Este √© um espa√ßo exclusivo da OpereBem para quem decidiu evoluir de verdade no mercado.\n"
        "Aqui dentro voc√™ ter√° acesso a:\n\n"
        ":books: Materiais e apostilas para estudo\n"
        ":movie_camera: Aulas e treinamentos organizados por m√≥dulos\n"
        ":bar_chart: Discuss√µes e an√°lises de mercado em tempo real\n"
        ":busts_in_silhouette: Conex√£o com professores, traders e outros alunos\n\n"
        f":arrow_right: Para liberar seu acesso, v√° at√© {canal_validacao.mention} e siga as instru√ß√µes.\n\n"
        "Seu pr√≥ximo passo como Trader come√ßa agora. :rocket:"
    )

    embed = discord.Embed(
        description=welcome_text,
        color=EMBED_COLOR
    )

    view = ui.View()
    view.add_item(ui.Button(label="Ir para Valida√ß√£o", style=discord.ButtonStyle.link, url=canal_validacao.jump_url))
    view.add_item(ui.Button(label="Ainda n√£o sou aluno", style=discord.ButtonStyle.link, url=REGISTRATION_LINK))

    await interaction.channel.send(embed=embed, view=view)
    await interaction.response.send_message("Mensagem de boas-vindas enviada!", ephemeral=True)

# --- NOVO COMANDO DE REGRAS ---
@tree.command(name="regras", description="Envia a mensagem com as regras da comunidade neste canal.")
@app_commands.default_permissions(administrator=True)
async def send_rules(interaction: discord.Interaction):
    rules_text = (
        "1Ô∏è‚É£ **Respeito em primeiro lugar**\n"
        "Trate todos com cordialidade. N√£o ser√° tolerado preconceito, ataques pessoais, xingamentos ou qualquer forma de discrimina√ß√£o.\n\n"
        "2Ô∏è‚É£ **Sem spam**\n"
        "Evite flood de mensagens, √°udios ou imagens desnecess√°rias. Links externos s√≥ com autoriza√ß√£o da modera√ß√£o.\n\n"
        "3Ô∏è‚É£ **Foco no aprendizado**\n"
        "Essa comunidade √© sobre trading, mercado financeiro e desenvolvimento. Mantenha os t√≥picos relevantes dentro de cada canal.\n\n"
        "4Ô∏è‚É£ **Nada de calls ou sinais de trade**\n"
        "O objetivo aqui √© educacional. N√£o compartilhe calls de compra/venda ou promessas de ganhos f√°ceis.\n\n"
        "5Ô∏è‚É£ **Ambiente saud√°vel**\n"
        "N√£o poste conte√∫dos ofensivos, violentos, pol√≠ticos ou de cunho sexual.\n\n"
        "6Ô∏è‚É£ **Ajuda m√∫tua e colabora√ß√£o**\n"
        "Compartilhe conhecimento, tire d√∫vidas, incentive a evolu√ß√£o dos colegas. A comunidade cresce junto.\n\n"
        "7Ô∏è‚É£ **Divulga√ß√£o de terceiros**\n"
        "Proibido divulgar cursos, canais ou servi√ßos externos sem autoriza√ß√£o da equipe.\n\n"
        "8Ô∏è‚É£ **Confidencialidade**\n"
        "Respeite o conte√∫do exclusivo da TradingClass. N√£o compartilhe materiais pagos fora do servidor.\n\n"
        "9Ô∏è‚É£ **Respeite a modera√ß√£o**\n"
        "A equipe de moderadores est√° aqui para organizar. Questione com respeito e siga as orienta√ß√µes.\n\n"
        "üîü **Tenha paci√™ncia**\n"
        "Nem sempre sua d√∫vida ser√° respondida na hora. Espere com calma e continue participando.\n\n"
        "‚úÖ Ao utilizar a comunidade, voc√™ declara que leu e concorda com os Termos de Uso da TradingClass."
    )

    embed = discord.Embed(
        title="üìú Regras da Comunidade TradingClass",
        description=rules_text,
        color=EMBED_COLOR
    )

    await interaction.channel.send(embed=embed)
    await interaction.response.send_message("Mensagem de regras enviada!", ephemeral=True)

# --- RODAR O BOT ---
bot_token = os.environ.get('DISCORD_TOKEN')
if not bot_token:
    print("‚ùå Erro cr√≠tico: O DISCORD_TOKEN n√£o foi encontrado nas vari√°veis de ambiente.")
else:
    client.run(bot_token)
